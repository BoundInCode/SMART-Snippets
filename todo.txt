- Syntax definition for .smart_snippet

- Snippets should be able to use the current selection/buffer

- Allow for AC in tabstops... Recursion
  > http://stackoverflow.com/questions/524548/regular-expression-to-detect-semi-colon-terminated-c-for-while-loops/524624#524624

- Scope [COMPLETE]
  > ##scope: _____________
  > multiple snippets, same name, dif scope
  > When creating scope by selection, give dropdown of the current scope, ordered by least to most specific

- Snippet management
  > create snippet from selection
  > quickly edit most recent snippet
  > delete snippet form qp
  > organize snippet by scope

- Autocompletion
  > AC{[1-9]:____,_____,____,_____}

- Smart snippets for making smart snippets :)

- Tabstops [COMPLETE]
  > replace \{.*\} with new region.  Have on_query_context check if has_next_smart_tabstop and bind tab to move to next tabstop. 

- Quick for-loops
 *5 -> for x in xrange(1,5):
 
 - How I envision this working:
  > Replace -> run replacements to make the code valid & simple
        - Should be as simple as possible to get started
            - word => self.view.substr(self.view.word(self.view.sel()[0])
  > Exec    -> execute the snippet's internal python
        - Syntax is still undecided.
            * How should code be wrapped?
  > Insert  -> insert the actual snippet
  > Dynamic -> Have an on_modified listener for snippets that change dynamically?
        - Not completely thought out yet

- Support for multiple cursors? [probably not going to happen any time soon]

Features I intent on implementing:
- Quick and easy ascess to otherwise complicated features
    - Create a simple syntax for adding to the quickpanel, autocompletion, inputpanel, mousemaps, and dialog boxes
    - Allow for chaining (i.e. Having autocompletions specific to a tabstop for providing options)
        - This would be especially useful for things such as (| = cursor):
            - display: |  
                         -------------
                        |   Block     |
                        |   Inline    |
                        |   None      |
                         -------------