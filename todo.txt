TODO
====
These are some of my plans and ideas that have sprouted in my head during development.  Most of it is nonsense that only I can decipher.

[COMPLETE] Syntax definition for .smart_snippet (tmlanguage)
   > Thanks Facelessuser!

[COMPLETE] Smart snippets for making smart snippets

- Add more to code shorthand
  > access to the clipboard

[Complete] Tabstops/AC/QP
  > Fix the regions issue.  When one region changes, it causes problems.  Perhaps, to get rid of this problem, once again change the structure of the * [FIXED]
  > Diff color for qs/ac/ts
  > Status bar info.  Where is the cursor in the snippet, what will happen next...
  > Recursive [COMPLETE]
     - Allow for snippets within snippets.

[COMPLETE] Scope
  > ##scope: _____________
  > multiple snippets, same name, dif scope
  > When creating scope by selection, give dropdown of the current scope, ordered by least to most specific

- Snippet management
  > create snippet from selection
  > quickly edit most recent snippet
  > delete snippet from qp
  > organize snippet by scope

[Complete] AC and QP

Changes in tmLanguage:
- Code should have a background?
- Code is now ``` instead of `
- ### is now comments
- new keywords: when, on, activate,params,...
- Change scopes around so that python code can go within regions

#Some new ideas --
- Put more of the API in the hands of the user
- Allow python within regions (ts, qp, ac...) [CHECK!]
 > You can have variables that span across code regions
 > You can import your own modules.
- make '###' into a comment for smart snippets [CHECK!]
- provide an optional '###trigger' field for snippets [CHECK!]
    > This would allow for symbols as triggers (eg. # or $)
    > Potentially allow for regex-matching triggers
    > Possible have triggers that trigger without tab?
- Store snippet triggers in a list [CHECK!]
- Escape should break out of snippet layer and go to next one.[CHECK!]

# The Future
- Inspired by concepts such as Light Table, I hope to see SMART Snippets providing for a more dynamic coding experience.  For example, as the user changes sections of code, the snippets could change dynamically.  Sublime Text and its API has so much to offer.  SMART Snippets is my attempt at getting all the power into the hands of the user.

[COMPLETE] Add optional '###no_tab:' yes/no to override user pref for expansion without tab.

- Make placeholder optional in new_region...
- Preserve indent
- Make snippet from selection
- $1 = tabstop